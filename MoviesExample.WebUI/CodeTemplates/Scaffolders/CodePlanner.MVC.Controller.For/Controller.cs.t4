<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cs" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<# var DataType = (EnvDTE.CodeType) Model.DataType; #>
using System.Linq;
using System.Web.Mvc;
<#
foreach(string ns in Model.ExtraUsings.Split(','))
{
#>
using <#= ns #>;
<#
}
#>
namespace <#= Model.Namespace #>.Controllers
{    
    public partial class <#= DataType.Name #>Controller : Controller
    {         
        protected I<#= DataType.Name #>Service <#= DataType.Name #>Service;
		
<#
var relatedServices = new System.Text.StringBuilder();
var relatedServicesStr = string.Empty;
foreach(RelatedEntityInfo relation in ParentRelations)
{
#>
		protected I<#= relation.RelationName #>Service <#= relation.RelationName #>Service;
		<#
		relatedServices.Append(", ");
		relatedServices.Append("I" + relation.RelationName + "Service " + relation.RelationName.ToLower() + "Service");
		#>
<#
}
#>		
		public <#= DataType.Name #>Controller(I<#= DataType.Name #>Service <#= DataType.Name.ToLower() #>Service<#= relatedServices.ToString() #>)
        {
            this.<#= DataType.Name #>Service = <#= DataType.Name.ToLower() #>Service;
<#		
foreach(RelatedEntityInfo relation in ParentRelations)
{
#>
		this.<#= relation.RelationName #>Service = <#= relation.RelationName.ToLower() #>Service;
<#
}
#>
        }	        					
		
		public ActionResult Index()
        {            
            return View(this.<#= DataType.Name #>Service.GetAll().OrderBy(x => x.<#= DataType.DisplayColumnProperty().Name #>));            
        }		

<#
foreach(RelatedEntityInfo relation in ParentRelations)
{
#>
		public ActionResult <#= DataType.Name #>To<#= relation.RelationName #>(int id)
        {
            var entities = this.<#= DataType.Name #>Service.Find(p => p.<#= relation.RelationName #>Id == id);
            return View("Index",entities);
        }
<#
}
#>		
		
		public ActionResult Details(int id)
        {
<#
foreach(RelatedEntityInfo relation in ParentRelations)
{
#>
			ViewBag.Possible<#= relation.RelationName #> = this.<#= relation.RelationName #>Service.GetAll();
<#
}
#>
            var entity = this.<#= DataType.Name #>Service.GetById(id);
            return View(entity);
        }
		
		public ActionResult Delete(int id)
        {
            var entity = this.<#= DataType.Name #>Service.GetById(id);
            return View(entity);
        }

        [HttpPost, ActionName("Delete")]
        public ActionResult DeleteConfirmed(int id)
        {
            var entity = this.<#= DataType.Name #>Service.GetById(id);
            this.<#= DataType.Name #>Service.Delete(entity);
            return RedirectToAction("Index");
        }

        public ActionResult Create()
        {       
<#
foreach(RelatedEntityInfo relation in ParentRelations)
{
#>
			ViewBag.Possible<#= relation.RelationName #> = this.<#= relation.RelationName #>Service.GetAll();
<#
}
#>
            return View();
        }

        /// <summary>
        /// Save a new entity
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult Create(<#= DataType.Name #> entity)
        {
            try
            {
				if(this.ModelState.IsValid){
                	this.<#= DataType.Name #>Service.SaveOrUpdate(entity);
                	return RedirectToAction("Index");
				}
<#
foreach(RelatedEntityInfo relation in ParentRelations)
{
#>
			ViewBag.Possible<#= relation.RelationName #> = this.<#= relation.RelationName #>Service.GetAll();
<#
}
#>
				return View(entity);
            }
            catch
            {
<#
foreach(RelatedEntityInfo relation in ParentRelations)
{
#>
			ViewBag.Possible<#= relation.RelationName #> = this.<#= relation.RelationName #>Service.GetAll();
<#
}
#>			
                return View();
            }            
        }

        public ActionResult Edit(int id)
        {
<#
foreach(RelatedEntityInfo relation in ParentRelations)
{
#>
			ViewBag.Possible<#= relation.RelationName #> = this.<#= relation.RelationName #>Service.GetAll();
<#
}
#>
            var entity = this.<#= DataType.Name #>Service.GetById(id);
            return View(entity);
        }

        [HttpPost]
        public ActionResult Edit(<#= DataType.Name #> entity)
        {
            try
            {
				if(this.ModelState.IsValid){	                
                	this.<#= DataType.Name #>Service.SaveOrUpdate(entity);
                	return RedirectToAction("Index");
				}
<#
foreach(RelatedEntityInfo relation in ParentRelations)
{
#>
			ViewBag.Possible<#= relation.RelationName #> = this.<#= relation.RelationName #>Service.GetAll();
<#
}
#>				
				return View(entity);
            }
            catch
            {
<#
foreach(RelatedEntityInfo relation in ParentRelations)
{
#>
			ViewBag.Possible<#= relation.RelationName #> = this.<#= relation.RelationName #>Service.GetAll();
<#
}
#>			
                return View();
            }
        }               
    }
}
<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
    public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
    
    foreach (ModelProperty prop in results) {
        if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>()) {
            prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
        }
        else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
            prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
        }
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
		}
    }

    return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return "Html.DisplayTextFor(_ => " + propertyExpression + ").ToString()";
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					ValueExpression = "Model." + prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty == prop),
					IsReadOnly = !prop.IsWriteable()
				});
			}
		}
	}

    return results;
}

IEnumerable<RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Parent); }
}

IEnumerable<RelatedEntityInfo> ChildRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Child); }
}

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}
#>