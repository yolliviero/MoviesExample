<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="EnvDTE" #>
<# var DataType = (CodeType)Model.DataType; #>
@model IEnumerable<<#= DataType.FullName #>>
@section JavaScript{
    <script type="text/javascript">
        $(function () {
            // Tabs
            $('.tabs').tabs();
        });
    </script>
}
<h2 class="demoHeaders">CodePlanner - Scaffolding Demo</h2>
<div class="tabs">
    <ul>
        <li><a href="#tabs-1"><#= DataType.Name #> Index</a></li>
    </ul>
    <div id="tabs-1">        
        <div>@Html.ActionLink("Create New <#= DataType.Name #>", "Create")</div>
        <div>
            <table>
                <thead>
				<tr>
<#
foreach (RelatedEntityInfo relation in ParentRelations) {
#>
<td><#= relation.RelationName #></td>
<#
}
#>
                    <td></td>
					<# foreach (ModelProperty property in GetModelProperties(Model.DataType, true)) {
    					if (!property.IsPrimaryKey && !property.IsForeignKey && !IsInRelation(property.Name)) {#>
						<td><#= property.Name #></td>						
						<#}#>
					<#}#>
<#/*
foreach (RelatedEntityInfo relation in ChildRelations) {
#>
<td><#= relation.RelationName #></td>
<#
}
*/#>
				</tr>
                </thead>
                <tbody>              
                @foreach (var item in Model)
                {  
                    <tr>
						<# foreach (RelatedEntityInfo relation in ParentRelations) { #>
						<td>@Html.ActionLink("<#= relation.RelationName #>","Index","<#= relation.RelationName #>", new {id = @item.<#= relation.RelationName #>Id},null)</td>
						<# 
						}#>
                        <td>@Html.ActionLink("Edit","Edit",new {id = @item.Id})
						| @Html.ActionLink("Details","Details",new {id = @item.Id})
						| @Html.ActionLink("Delete","Delete",new {id = @item.Id})</td> 
						<# foreach (ModelProperty property in GetModelProperties(Model.DataType, true)) {
    						if (!property.IsPrimaryKey && !property.IsForeignKey && !IsInRelation(property.Name)) {#>							
							<td>@item.<#= property.Name #></td>									
							<#}#>
						<#}#>
						<#/* foreach (RelatedEntityInfo relation in ChildRelations) { #>
						<td>@Html.ActionLink("<#= relation.RelationName #>","<#= relation.RelationName #>To<#= DataType.Name #>","<#= relation.RelationName #>", new {id = @item.Id},null)</td>
						<#
						} */#>
                    </tr>                               
                }
                </tbody>  
            </table>
        </div>
    </div>
</div>
<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
    public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
    
    foreach (ModelProperty prop in results) {
        if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>()) {
            prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
        }
        else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
            prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
        }
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
		}
    }

    return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return "Html.DisplayTextFor(_ => " + propertyExpression + ").ToString()";
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					ValueExpression = "Model." + prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty == prop),
					IsReadOnly = !prop.IsWriteable()
				});
			}
		}
	}

    return results;
}

IEnumerable<RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Parent); }
}

IEnumerable<RelatedEntityInfo> ChildRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Child); }
}

int ChildCount {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Child).Count(); }
}

bool IsInRelation(string propertyName) {
    return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Count(x => x.RelationName == propertyName) > 0;
}

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}
#>