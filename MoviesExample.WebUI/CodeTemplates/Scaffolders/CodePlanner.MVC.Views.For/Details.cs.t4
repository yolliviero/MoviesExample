<#@ Template Language="C#" HostSpecific="True" Inherits="DynamicTransform" #>
<#@ Output Extension="cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="EnvDTE" #>
<# var DataType = (CodeType)Model.DataType; #>
@model <#= DataType.FullName #>

<div data-role="page" id="<#= DataType.Name #>Details">
    <div data-role="header" data-position="fixed"> 
        <a data-direction="reverse" href="/<#= DataType.Name #>/Index">Back</a>        
        <h1>
            Details</h1>        
        <a href="/<#= DataType.Name #>/Edit/@Model.Id" data-role="button"  data-icon="gear" data-rel="dialog" data-transition="pop" class="ui-btn-right">Edit</a>
    </div>
    <div data-role="content">
        <div data-role="fieldcontain">       
			@Html.Partial("_Display", Model)	            
        </div>
        <a href="/<#= DataType.Name #>/Delete/@Model.Id" data-rel="dialog" data-role="button" data-transition="pop" data-icon="delete">Delete</a>
		
		<# if(ParentRelations.Count() > 0 || ChildCount > 0){ #>
			<ul data-role="listview" data-inset="true">
				<# if(ParentRelations.Count() > 0){ #>
				<li data-role="list-divider">Parents</li>
				<# foreach (RelatedEntityInfo relation in ParentRelations) { #>
				<li><a href="/<#= relation.RelationName #>/Details/@Model.<#= relation.RelationName #>Id"><#= relation.RelationName #></a></li>			
				<#}#>
				<# } #>
				<# if(ChildCount > 0){ #>
				<li data-role="list-divider">Children</li>
				<#foreach(RelatedEntityInfo relation in ChildRelations){ 				
				#>
                <li><a href="/<#= relation.RelatedEntityType.Name #>/<#= relation.RelatedEntityType.Name #>To<#= DataType.Name #>/@Model.Id"><#= relation.RelationName #><span class="ui-li-count">@Model.<#=relation.RelationName #>.Count</span></a></li>
        		<# } #>	
				<# } #>
			</ul>
		<# } #>
    </div>
    <div data-role="footer" data-position="fixed">
        <div data-role="navbar">
            <ul>
                <li><a href="/Home" data-icon="home" data-iconpos="top">Home</a></li>
            </ul>
        </div>
        <h4>&copy codeplanner 2012</h4>        
    </div>
</div>
<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string ValueExpression { get; set; }
	public EnvDTE.CodeTypeRef Type { get; set; }
    public bool IsPrimaryKey { get; set; }
	public bool IsForeignKey { get; set; }
	public bool IsReadOnly { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible to be edited using a textbox
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = GetEligibleProperties(typeInfo, includeUnbindableProperties);
    
    foreach (ModelProperty prop in results) {
        if (prop.Type.UnderlyingTypeIs<double>() || prop.Type.UnderlyingTypeIs<decimal>()) {
            prop.ValueExpression = "String.Format(\"{0:F}\", " + prop.ValueExpression + ")";
        }
        else if (prop.Type.UnderlyingTypeIs<DateTime>()) {
            prop.ValueExpression = "String.Format(\"{0:g}\", " + prop.ValueExpression + ")";
        }
		else if (!IsBindableType(prop.Type)) {
			prop.ValueExpression = GetValueExpression("Model." + prop.Name, (EnvDTE.CodeType)prop.Type.CodeType);
		}
    }

    return results;
}

// Change this list to include the names of properties that should be selected to represent an entity as a single string
static string[] displayPropertyNames = new[] { "Name", "Title", "LastName", "Surname", "Subject", "Count" };

string GetValueExpression(string propertyExpression, EnvDTE.CodeType propertyType) {
	if (propertyType != null) {
		var chosenSubproperty = propertyType.DisplayColumnProperty() ?? propertyType.FindProperty(displayPropertyNames);
		if (chosenSubproperty != null) {
			var toStringSuffix = chosenSubproperty.Type.AsFullName == "System.String" ? "" : ".ToString()";
			return String.Format("({0} == null ? \"None\" : {0}.{1}{2})", propertyExpression, chosenSubproperty.Name, toStringSuffix);
		}
	}
	return "Html.DisplayTextFor(_ => " + propertyExpression + ").ToString()";
}

// Helper
List<ModelProperty> GetEligibleProperties(EnvDTE.CodeType typeInfo, bool includeUnbindableProperties) {
    List<ModelProperty> results = new List<ModelProperty>();
	if (typeInfo != null) {
		foreach (var prop in typeInfo.VisibleMembers().OfType<EnvDTE.CodeProperty>()) {
			if (prop.IsReadable() && !prop.HasIndexParameters() && (includeUnbindableProperties || IsBindableType(prop.Type))) {
				results.Add(new ModelProperty {
					Name = prop.Name,
					ValueExpression = "Model." + prop.Name,
					Type = prop.Type,
					IsPrimaryKey = Model.PrimaryKeyName == prop.Name,
					IsForeignKey = ParentRelations.Any(x => x.RelationProperty == prop),
					IsReadOnly = !prop.IsWriteable()
				});
			}
		}
	}

    return results;
}

IEnumerable<RelatedEntityInfo> ParentRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Parent); }
}

IEnumerable<RelatedEntityInfo> ChildRelations {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Child); }
}

bool IsInRelation(string propertyName) {
    return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Count(x => x.RelationName == propertyName) > 0;
}

int ChildCount {
	get { return ((IEnumerable)Model.RelatedEntities).OfType<RelatedEntityInfo>().Where(x => x.RelationType == RelationType.Child).Count(); }
}

// Helper
bool IsBindableType(EnvDTE.CodeTypeRef type) {
    return type.UnderlyingIsPrimitive() || bindableNonPrimitiveTypes.Any(x => type.UnderlyingTypeIs(x));
}
#>

